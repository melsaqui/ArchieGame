//Will run in windows because of system("cls")
#include <stdio.h>
#include <ctype.h> //for isdigit
#include <string.h> //for strcpy, and strcmp, 
#include <stdlib.h> //for rand,and atoi
#include <time.h> //for time(0)

#include "Oils.h"
#define DINTEREST 0.10 //debt interest

/* Description: Displays the Main Menu and Title of the Game*/
void displayMenu()
{
	printf("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	printf(" |%31s %10s", "OIL BULARYO ON THE GO!","|\n");
	printf(" |%42s","|\n");
	printf(" |  Main Menu %30s", "|\n");
	printf (" |     1-Start Game  ");
	printf(" | %13s %5s \n ","2-End Game ","|");
	printf("|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n");
	
}

/* Description: Asks the player whether to Start the game or end the game
Return: Returns 0 if player chooses to exit else it would clear the screen for Gameplay() 
*/
int menu()
{
	char cAns;

	while (cAns <'1' || cAns>'2')
	{
		printf(" |    Type 1 or 2 for your Choice  %8s\n ", "|");
		scanf(" %c", &cAns);	
	}
	if (cAns == '1')
	{
		system ("cls");
		return 1;	
	}
	else if (cAns == '2')
		return 0;
	
}
/*Description: GetRandoms is the function to generate random numbers
Parameter 1: nLow is the lowest number to be generted in the range
Parameter 2: nUp is the highest number possible in the range
return: A random number within the range*/

int GetRandoms(int nLow, int nUp)
{
	int i;
	int nNum;
	for(i=0; i < 1; i++)
	{
		nNum = (rand() % (nUp - nLow + 1) + nLow);
	}
	return nNum;
}
/*Description: Generates a random number 1-4 that represents what essential oil will be dropped
Return Value: a value within the range 1-4 
*/
int EoilDrop()
{
	int nLow = 1;
	int nUp = 4;
	srand(time(0));
	return GetRandoms(nLow, nUp);
}
/*Description: Generate random number from 1-3 that represents the diffuser oil to be dropped
Return Value: a value within the range of 1-3 
*/
int DoilDrop()
{
	int nLow = 1;
	int nUp = 3;
	srand(time(0));
	return GetRandoms(nLow, nUp);
}
/*Description: Generates a random number from 1-100, the number generated will be compared if it is equal or than the 
probability required 
Return Value: a value within range 1-100*/
int getChance()
{
	int nLow = 1;
	int nUp = 100;
	srand(time(0));
	return GetRandoms(nLow,nUp);
	
}
/*Descrption: Generates random number from 1-100, the number generated will be compared on the required percentage 
for a drop to occur
Return Value: a value within range 1-100*/
int getDrop()
{
	int nLow = 1;
	int nUp = 100;
	return GetRandoms(nLow, nUp);	
}

/*Desription: Function that handles the freebie drops
Parameter 1: pRose is present because the drops of rosemary oils can be added
Parameter 2: pLav is present because the drops of lavender oils can be added
Parameter 3: pLem is present because the drops of lemon oils can be added
Parameter 4: pMint is present because the drops of mint oils can be added
Parameter 5: pCm is present because the drops of clear minds oils can be added
Parameter 6: pEb is present because the drops of energy booster oils can be added
Parameter 7: pCal is present because the drops of calming oils can be added
Return Value: The drops of the oils in the parameter would be updated if by chance the player gets a freebie
*/
void getFreebies(Eoils *pRose, Eoils *pLav, Eoils *pLem, Eoils *pMint, Doils *pCm, Doils *pEb, Doils *pCal)
{
	int nChance;
	int nDrop;
	int nNew;
	nChance = getChance();
	
	if (nChance <= 15)
	{
		nDrop = getDrop();
		if (nDrop <= 40)
		{
			nNew = EoilDrop();
			switch (nNew)
			{
				case 1:
				{
					pRose -> nDrops++;
					printf(" \n %20s Congratulations You Got a free drop of Rosemary Oils! \n\n", " ");
					break;
				}
				case 2: 
				{
					pLav -> nDrops++;
					printf(" \n %20s Congratulation You Got a free drop of Lavender Oils! \n\n", " ");
					break;
				}
				case 3:
				{
					pLem -> nDrops++;
					printf(" \n %20s Congratulations You Got a free drop of Lemon Oil! \n\n", " ");
					break;
				}
				case 4:
				{
					pMint -> nDrops++;
					printf(" \n %20s Congratulations You Got a free drop of Mint Oil! \n\n", " ");
					break;
				}
			}
		}
		else if (nDrop >= 41 && nDrop <= 70)
		{
			nNew = DoilDrop();
			switch(nNew)
			{
				case 1:
				{
					pCm -> nAmnt++;
					printf(" \n %20s Congratulations You Got a free drop of Clear Minds Oil! \n\n", " ");
					break;
				}
				 	
				case 2:
				{
					pEb -> nAmnt++;
					printf(" \n %15s Congratulations You Got a free drop of Energy Booster Oil! \n\n", " ");	
					break;
				}
					
				case 3:
				{
					pCal -> nAmnt++;	
					printf(" \n %20s Congratulations You Got a free drop of Calming Oil! \n\n", " ");
					break;
				}
						
			}
		}
	}
}

/*Description: GetMakeCharge is the function that sets the Make price range for the diffuser oils
Parameter 1: cCity is where the city the player currently in, it is important as the make price depends on the city
Return Value: Random number within the range which will be the make charge*/
int GetMakeCharge(char cCity[])
{
	int nLow;
	int nUp;
	
	if (strcmp("MANILA",cCity) == 0)
	{
		nLow = 20;
		nUp = 30;	
	}
	else if(strcmp("MAKATI",cCity) == 0)
	{
		nLow = 80;
		nUp = 100;
	}
	else if (strcmp("ALABANG",cCity) == 0)
	{
		nLow = 70;
		nUp = 90;
	}
	else 
	{
		nLow = 40;
		nUp = 60;
	}
	srand(time(0));
	return GetRandoms(nLow,nUp);
}
/* Description: Asks the player where they would want to go, as well as what would happen if player chose to travel
Parameters: 
Parameter 1: *pCity is here inorder to be able to update the city of the player
Parameter 2: *pDay is here because when the player travels it would be a new day, thus the day would be uodated
Parameter 3: *pDebt is to add to the debt of the player after every day
Parameter 4: *pMCharge is to update the make charge for the diffuse because it changes everyday 
Parameter 5: *pRose is present because the buy price of the Rosemary essential oil would chage everyday so in here it would be updated
Parameter 6: *pLav is present because the buy price of lavender Essential oils Change everyday, and it gets updated here
Parameter 7: *pLem is present to update the buy price of the Lemon essential oil, which changes everyday
Parameter 8: *pMint is present to update the buy price of the Mint essential oil which changes everyday
Return Value: Updated city, buy prices off oils, debt and number of days left. Amount if oils also gets
added if the player gets a freebie.
*/
void doTravel(char *pCity[8], int *pDay, int *pDebt,int *pMCharge, Eoils *pRose, Eoils *pLav, Eoils *pLem, Eoils *pMint, Doils *pCm, Doils *pEb, Doils *pCal)
{
	char cChoice[4][8] = {"MANILA", "MAKATI", "ALABANG", "QUEZON"};
	char cCich;
	int c;
	
	printf(" |%87s\n", "|");
	printf(" | %22s %30s %7s %25s","|","Where do you want to Go?","|", "|\n");
	printf(" | %22s  %27s %9s %25s","|"," 1-Manila  |  2-Makati", "|","|\n");
	printf(" | %22s %28s %9s %25s", "|","3-Alabang  |  4-Quezon","|", "|\n");

	do
	{
		printf(" |  Enter number of your choice (1-4) %52s", "|\n");	
		scanf(" %c", &cCich);
	}
	while (cCich<'1' || cCich > '4');
	
	c = cCich - 48 - 1; // decimal value of char 0 is 48
		if (strcmp(*pCity, cChoice[c]) != 0)
		{
			strcpy(*pCity, cChoice[c]);
			*pDay = *pDay - 1;
			
			*pDebt = *pDebt + *pDebt * DINTEREST;
			*pMCharge = GetMakeCharge(*pCity);
			
			pRose -> nBuyPrice = GetRoseBuyPrice();
			pLav -> nBuyPrice = GetLavBuyPrice();
			pLem -> nBuyPrice = GetLemBuyPrice();
			pMint -> nBuyPrice = GetMintBuyPrice(); 
			
			pCm -> nSellPrice = 1.15 * (3 * (pLem -> nBuyPrice / 10) + 2 * (pRose -> nBuyPrice/10) + 2 * (pMint -> nBuyPrice / 10));
			pEb -> nSellPrice = 1.15 * (pLem -> nBuyPrice / 10 +  pRose -> nBuyPrice / 10 + pMint -> nBuyPrice / 10);
			pCal -> nSellPrice = 1.15 * (pLem -> nBuyPrice / 10 + 2 * (pRose -> nBuyPrice / 10) + 3 * (pLav -> nBuyPrice / 10));	
			
			system("cls");
			getFreebies(pRose, pLav, pLem, pMint, pCm, pEb, pCal);
			
		}		
		else
		system("cls");
}
/*Description: Counts how many characters are not digits in the user string inputs
Parameter: a is meant to represent any string value the user has input in other functions 
return: 1 or 0 representing true or false respectively*/
int isValid(char a[10])
{
	int bValid = 0;
	int i;
	for(i = 0; i < strlen(a); i++)
	{
		if (isdigit(a[i]) == 0)
			bValid++;
	}
	if (bValid == 0)
		return 1; //true
	else 
		return 0; //false
}

/*Description: doLoan is the function will process what will happen when player loan money
Parameter 1: *pMoney is the money at hand
Parameter 2: *pDebt is the debt the player currently owes
Return Value: the players money at hand as well as debts should be added depending on how much the player wants to loan*/
void doLoan(int *pMoney, int *pDebt)
{
	char cLoan[10];
	int nLoanAmnt;
	int bValid;
	
	do 
	{	
		printf(" | How much do you want to loan? %56s\n","|");
		scanf("%s", &cLoan);
		bValid = isValid(cLoan);
	}
	while (bValid == 0);
	nLoanAmnt = atoi(cLoan);
	*pMoney += nLoanAmnt;
	*pDebt += nLoanAmnt;
	

}
/*Description: payDebt is the function that processes that makes the player pay their debt
Parameter 1: *pMoney is the money of the player at hand
Parameter 2: *pDebt is the debt the player currently has
Return Value: money and debt is reduced when player has paid debt.*/
void payDebt(int *pMoney, int *pDebt)
{
	char cPayD[30];
	int bValid ;
	int nPay;
	
	do 
	{
		printf(" |  How much do you want to pay? (Whole numbers only!) %35s"," |\n");
		scanf("%s",&cPayD);
		bValid = isValid(cPayD);
		
		if (bValid !=0 )
			nPay = atoi(cPayD);
		else 
			printf(" |  Invalid Value! %70s\n","|");
		
		if (nPay > *pDebt || nPay > *pMoney || nPay < 0)
			printf(" |  Invalid Amount! %69s\n","|");
	}
	while (bValid == 0|| nPay > *pDebt || nPay > *pMoney || nPay < 0);
	
	*pMoney = *pMoney - nPay;
	*pDebt = *pDebt - nPay;
			  
}
/*Description: GetFinalMax is function is in order to make the actual maximum amount the player can make considering the amount of money they have
Parameter 1: nMax is the maximum amount that could be made but without money as a factor
Parameter 2: nPrice is the price of making a diffuser oil, this used to see if the player coul afford it if they bought the maximum amount
Parameter 3: nMoney is the money the player currently has on hand, this to be compare to the price of the maximum if affordable
paramter 4: nMCharge is the charge for making the diffuse oil
return: nMax which is the actual maximum that the player can afford*/

int GetFinalMax(int nMax, int nPrice, int nMoney, int nMCharge)
{
	while (nMax * nPrice + nMCharge >= nMoney)
	{
		nMax = nMax - 1;
	}
	return nMax;
}
/*Description: Function that will generate the make price without the charge for the diffuser oil the player chose
parameter 1: cChoice is the choice choice of diffuser oil the player chose
parameter 2: Lav is the lavender essential oil, its price per drop is a factor for the price
parameter 3: Lem is the lemon essential oil, its price per drop is a factor for theprice
parameter 4: Rose is the Rosemary essential oil, its price per drop is a factor for the make price
parameter 5: Mint is the mint essential oil, its price per drop is a factor for the price*/
int MakePricesNoCharge(char cCHoice, int nLav, int nLem, int nRose, int nMint)
{
	if (cCHoice == '1')
	{
		return (3 * nLem + 2 * nRose + 2 * nMint);
	}
	else if (cCHoice == '2')
	{
		return (1 * nLem + 1 * nRose + 1 * nMint);
	}
	else 
		return (1 * nLem + 2 * nRose + 3 * nLav);
}
/*Description: This function is where the program updates the amount of diffuser oils the player now have
Parameter 1: cChoice this is the diffuser oil that the user wants to make
Parameter 2: cHm this is the amount of diffuser oil the player wants to make
Parameter 3: *pLav This is where the Drops of lavender is stored which is needed to make the diffuser oils
Parameter 4: *pLem This is where the Drops of Lemon is stored which is needed to make diffuser oils
Parameter 5: *pRose This is where the Drops of Rosemary is stored which is needed to make diffuser oils
Parameter 6: *pMint This is where the Drops of Mintis stored which is needed to make diffuser oils
Parameter 7: *pCm is the Clear mind diffuser oil, it will get updated if the user chose to make it
Parameter 8: *pEb is the Energy Booster diffuser oil, it will get updated if the user chose to make it
Parameter 9: *pCal is the Calming diffuser oil, it will get updated if the user chose to make it
*/
void AddDiff(char cChoice, char cHm[3], Eoils *pLav, Eoils*pLem,Eoils *pRose, Eoils *pMint,int *pCm, int *pEb, int *pCal)
{
	if (cChoice =='1')
	{
		pLem -> nDrops -= 3 * atoi(cHm);
		pRose -> nDrops -= 2 * atoi(cHm);
		pMint -> nDrops -= 2 * atoi(cHm);
		*pCm += atoi(cHm);
	}
	else if(cChoice == '2')
	{
		pLem -> nDrops -= atoi(cHm);
		pRose -> nDrops -= atoi(cHm);
		pMint -> nDrops -= atoi(cHm);
		*pEb += atoi(cHm);
	}
	else if(cChoice == '3')
	{
		pLav -> nDrops -= 3 * atoi(cHm);
		pRose -> nDrops -= 2 * atoi(cHm);
		pLem -> nDrops -= atoi(cHm);
		*pCal += atoi(cHm);
	}
	
}
/*Description: MakeDiff Holds all the functions involved in making the diffusser oils
Parameters:
Parameter 1: *pMoney is here so the program can be able to tell user if they cannot afford making the diffuser oil.
 It is also here because money is reduced when player makes a diffuser oil
Parameter 2: cCity is present for because the price for making the oils would depend on the city
Parameter 3: nMprice the make price is here because this is the cost to make a diffuser oil and this would be reduced from the players money
Parameter 4: *pLav is in order for the program to know if there are enough drops of lavender essential oil to make diffuser oil and to update it when player makes
Parameter 5: *pLem is in order for the program to know if there are enough drops of lemon essential oil to make diffuser oil and to update it when player makes
Parameter 6: *pRose is in order for the program to know if there are enough drops of Rosemary essential oil to make diffuser oil and to update it when player makes
Parameter 7: *pMint is in order for the program to know if there are enough drops of Mint essential oil to make diffuser oil and to update it when player makes
Parameter 8: *pCm is for the clear minds diffuser oil, it is here for the program to update it if the player chooses to make it
Parameter 9: *pEb is for the Energy Booster diffuser oil, it is here for the program to update it if the player chooses to make it
Parameter 10: *pCal is for the calming diffuser oil, it is here for the program to update it if the player chooses to make it
*/
void MakeDiff( int *pMoney, char cCity[8],int nMprice,Eoils *pLav, Eoils *pLem, Eoils *pRose, Eoils *pMint, int *pCm, int *pEb, int *pCal)
{
	char cChoice;
	int nMax;
	char cHm[3];
	int bValidhm;
	int nPrice; 
	
	printf(" | Today's Make charge is: %d %60s", nMprice,"|\n");
	do
	{
		printf(" | What do you want to make? (Enter number, press 4 to go back) %26s","|\n");
		scanf(" %c",&cChoice);		
	}
	while (cChoice < '1' || cChoice > '4');
	
	if (cChoice < '4')
	{
		if (cChoice == '1')
		{
			if (pLem -> nDrops / 3 <= pRose->nDrops / 2 && pLem->nDrops / 3 <= pMint->nDrops / 2)
			{
				nMax = pLem -> nDrops / 3;	 
				
			}
			else if (pRose -> nDrops / 2 <= pLem->nDrops / 3 && pRose -> nDrops / 2 <= pMint -> nDrops / 2)
			{
				nMax = pRose -> nDrops / 2;
			}
			else
				nMax = pMint -> nDrops / 2;
		}
		else if (cChoice == '2')
		{
		
		 if (pLem -> nDrops <= pRose -> nDrops && pLem -> nDrops <= pMint -> nDrops)
			{
		 		nMax = pLem -> nDrops;
			}
			else if (pRose -> nDrops <= pLem -> nDrops && pRose -> nDrops <= pMint -> nDrops)
			{
				nMax = pRose -> nDrops;	
			}
			else
				nMax = pMint->nDrops;
		}
			
		else if (cChoice == '3')
		{
			if (pLem -> nDrops <= pRose ->nDrops / 2 && pLem -> nDrops <= pLav -> nDrops / 3)
			{
				nMax = pLem -> nDrops;	
			}
			else if (pRose -> nDrops / 2 <= pLem -> nDrops && pRose -> nDrops / 2 <= pLav-> nDrops / 3)
			{
				nMax = pRose -> nDrops / 2;
			}
			else
				nMax = pLav -> nDrops / 3;
		}
		
		nPrice = MakePricesNoCharge(cChoice, pLav->nPriPerdrp, pLem->nPriPerdrp, pRose->nPriPerdrp, pMint->nPriPerdrp);
		nMax = GetFinalMax(nMax, nPrice, *pMoney, nMprice);
		if (nMax <= 0)
		{
			printf(" | YOU CANNOT AFFORD ANY OR YOU LACK INGREDIENTS!! %38s\n","|");
			MakeDiff( pMoney, cCity, nMprice, pLav,  pLem,  pRose, pMint, pCm, pEb, pCal);
		}
		else 
		{	printf(" | Price to make each of that is %d plus today's make charge %27s\n", nPrice, "|");
			do
			{
				printf(" | How many do you want to make? (MAX = %d) %43s\n", nMax, "|");
				scanf("%s", &cHm);
				bValidhm = isValid(cHm);
			}
			while(bValidhm == 0 || atoi(cHm) > nMax || atoi(cHm) < 0);
			*pMoney -= nPrice * atoi(cHm) + nMprice;
			AddDiff(cChoice, cHm, pLav, pLem, pRose, pMint, pCm, pEb, pCal);
		}
	}	
}

/*Description: Generates the charge for the essential oils
Return Value: Random number between 101-200*/
int GetEoilCharge()
{
	
	int nUp = 200;
	int nLow = 101;
	srand(time(0));
	return GetRandoms(nLow, nUp);
}

/*Description: This is where the range for the buying price if the rosemary essential oil is declared
return Value: buying price for rosemary essential oils*/
int GetRoseBuyPrice()
{	
	int nChance;
	int nUp = 100;
	int nLow = 70;
	srand(time(0));
	nChance = getChance();
	
	if (nChance <= 35)
		return GetRandoms(nLow, nUp) + GetEoilCharge();
	else if(nChance > 35 && nChance <= 70)
		return GetRandoms(nLow, nUp) - GetEoilCharge();
	else if (nChance > 70 && nChance <91 )
		return GetRandoms(nLow, nUp) * GetEoilCharge();
	else
		return GetRandoms(nLow, nUp);
}

/*Description: This is where the range for the buying price if the lavender essential oil is declared
return Value: Random number within the range that will be the buying price for lavender essential oils*/
int GetLavBuyPrice()
{
	int nChance;
	int nUp = 60;
	int nLow = 20;
	srand(time(0));
	
	nChance = getChance();
	
	if (nChance <= 35)
		return GetRandoms(nLow, nUp) + GetEoilCharge();
	else if(nChance > 35 && nChance <= 70)
		return GetRandoms(nLow, nUp) - GetEoilCharge();
	else if (nChance > 70 && nChance < 91 )
		return GetRandoms(nLow, nUp) * GetEoilCharge();
	else
		return GetRandoms(nLow, nUp);
}

/*Description: This is where the range for the buying price if the lemon essential oil is declared
return Value: Random number within the range that will be the buying price for lemon essential oils*/
int GetLemBuyPrice()
{
	int nChance;
	int nUp = 150;
	int nLow = 100;
	srand(time(0));
	
	nChance = getChance();
	
	if (nChance <= 35)
		return GetRandoms(nLow, nUp) + GetEoilCharge();
	else if(nChance > 35 && nChance <= 70)
		return GetRandoms(nLow, nUp) - GetEoilCharge();
	else if (nChance > 70 && nChance < 91 )
		return GetRandoms(nLow, nUp) * GetEoilCharge();
	else
		return GetRandoms(nLow, nUp);
}

/*Description: This is where the range for the buying price if the mint essential oil is declared
return Value: Random number within the range that will be the buying price for mint essential oils*/
int GetMintBuyPrice()
{
	int nChance;
	int nUp = 200;
	int nLow = 130;
	srand(time(0));
	
	nChance = getChance();
	
	if (nChance <= 35)
		return GetRandoms(nLow, nUp) + GetEoilCharge();
	else if(nChance > 35 && nChance <= 70)
		return GetRandoms(nLow, nUp) - GetEoilCharge();
	else if (nChance > 70 && nChance < 91 )
		return GetRandoms(nLow, nUp) * GetEoilCharge();
	else
		return GetRandoms(nLow, nUp);
}
/*Description: AddEoils is where the program would update the essential oils after the player has bought them
Paramter1: pEOil is the oilt that the player chose from the Buy function
Parameter 2: pMoney is the players money at hand
Return Value: oil and money of the player would be updated
*/
void AddEoils(Eoils *pEOil, int *pMoney)
{
	char cHm[5];
	int bValid;
	int nAmnt;
	int nMax;
	
	nMax = *pMoney / pEOil-> nBuyPrice;
	do 
	{
		printf(" | How many do you want to buy? (MAX = %d) %47s\n",nMax,"|");
		scanf("%s", &cHm);
		bValid = isValid(cHm);
		
	}
	while (bValid == 0);
	if (atoi(cHm) != 0)
	{
		nAmnt = atoi(cHm);
		if (pEOil -> nBuyPrice * nAmnt > *pMoney)
		{
			printf(" | You can't afford that many!!! %56s\n","|");
			AddEoils(pEOil, pMoney);
		}
		else
		{
			*pMoney -= pEOil->nBuyPrice*nAmnt;
			pEOil -> nPriPerdrp = pEOil -> nPriPerdrp * pEOil-> nDrops + nAmnt * 10 * (pEOil -> nBuyPrice / 10);
			pEOil -> nDrops += nAmnt*10;
			pEOil -> nPriPerdrp /= pEOil->nDrops;
			
		}
	}
}
/*Description: Function that asks the player what they want to buy
Parameter 1: Lav is the lavender essential oil
Parameter 2: Lem is the Lemon essential oil
Parameter 3: Rose is the rosemary essential oil
Parameter 4: Mint is the mint essential oil
Parameter 5: nMoney is the money the player has
Return Value: After player chooses what oil to buy it will go to AddEoils to update the money and 
amount of essential oils*/

void doBuy(Eoils *pLav, Eoils *pLem, Eoils *pRose, Eoils *pMint, int *pMoney)
{
	char cAns;
	int bAvail;
	do
	{
		bAvail = 1;
		printf(" | Enter Number of what you want to buy (1-4, press 5 to go back) %24s \n"," | ");
		scanf(" %c", &cAns);
		if (cAns == '1')
		{	
			if(	pRose -> nBuyPrice > *pMoney || pRose -> nBuyPrice <= 0) 
			{
				printf(" |  You cannot Afford Any or there is no stock!! %40s \n","|");
				bAvail = 0;
			}	
			else	
			{
				AddEoils(pRose, pMoney); 
			}
		}
		else if ( cAns == '2')
		{
			if(pLav -> nBuyPrice > *pMoney || pLav->nBuyPrice <= 0 )
			{
				printf(" | You cannot Afford Any or there is no stock!! %41s\n","|");
				bAvail = 0;
			}
			else
				AddEoils(pLav, pMoney);
		}
		else if (cAns == '3')
		{
			if(pLem -> nBuyPrice > *pMoney || pLem -> nBuyPrice<=0)
			{
				printf(" | You cannot Afford Any or there is no stock!! %41s\n","|");
				bAvail = 0;
			}
			else
				AddEoils(pLem, pMoney);		
		}
		else if (cAns == '4')
		{
			if (pMint -> nBuyPrice > *pMoney || pMint -> nBuyPrice <= 0)
			{
				printf(" | You cannot Afford Any or there is no stock!! %41s\n","|");
				bAvail = 0;
			}
			else
				AddEoils(pMint, pMoney);	
		}	
		
	}
	while (cAns < '1' || cAns > '5' || bAvail == 0);
		
}
		
/*Description: buyPriceList displays the prices of the essential oils 
Parameter 1: Lav is the buying price of Lavender essential oils
Parameter 2: Lem is the buying price of Lemon essential oils
Parameter 3: Rose is the buying price of Rosemary essential oils
Parameter 4: Mint is buying price of Mint essential oils
*/
void displayBuyPrice(int Lav, int Lem, int Rose, int Mint)
{
	printf(" |%87s\n", "|");
	printf(" | %22s %30s %7s %25s","|", "PRICE LIST (per 10 Drops)","|","|\n");
	if (Rose <= 0)
	{
		printf(" | %22s %11s %19s %s %3s %24s\n","|","1-Rosemary"," " , "NA", "|","|");
	}
	else
		printf(" | %22s %11s %18s %d %3s %24s\n","|","1-Rosemary"," " , Rose, "|","|");
	if (Lav <= 0)
	{
		printf(" | %22s %11s %19s %s %3s %24s\n", "|","2-Lavender"," ", "NA", "|","|");
	}
	else
		printf(" | %22s %11s %18s %d %3s %24s\n", "|","2-Lavender"," ", Lav,"|","|");
	if (Lem <= 0)
	{
		printf(" | %22s %8s %21s %s %3s %24s\n", "|","3-Lemon", " ", " NA","|","|");
	}
	else
		printf(" | %22s %8s %21s %d %3s %24s\n", "|","3-Lemon", " ", Lem,"|","|");
	if (Mint <= 0)
	{
		printf(" | %22s %7s %22s %s %3s %24s\n","|", "4-Mint"," ", " NA","|","|");
	}
	else 
		printf(" | %22s %7s %22s %d %3s %24s\n","|", "4-Mint"," ", Mint,"|","|");
	printf(" |%87s\n", "|");
	
} 

/*Description: displays the selling price for the essential oils and diffuser oils
Parameter 1: in the struct nLav the drops of lavender oil is stored to determine if it is available.
 nLav also stores the lavender selling price to be displayed. 
Parameter 2: int the struct nLem the drops of lemon oils is stored to determine if its available.
 nLem also stores the selling price of the oil to be displayed.
Parameter 3: in the struct nRose the drops of Rosemary oils is stored to determine if its available.
 nRose also stores the selling price of the oil to be displayed.
Parameter 4: in the struct nMint the drops of Mint oils is stored to determine if its available.
 nMint also stores the selling price of the oil to be displayed.
Parameter 5: in the struct nCm the drops of clear minds oils is stored to determine if its available.
 nMint also stores the selling price of the oil to be displayed.
parameter 6: in the struct nEb the drops of energy booster oils is stored to determine if its available.
 nEb also stores the selling price of the oil to be displayed.
parameter 7: in the struct nCal the drops of ccalming oils is stored to determine if its available.
 nCal also stores the selling price of the oil to be displayed.
  */
  
void displaySellPrice(Eoils nLav,Eoils nLem, Eoils nRose,Eoils nMint,Doils nCm, Doils nEb,Doils nCal)
{
	printf(" |%87s\n", "|");
	printf(" | %64s %21s\n"," |          What to you want to sell?         |","|");
	if (nRose.nDrops>0)
	{
		printf(" |%32s %s %d  ", " | 1-Rosemary "," ", nRose.nPriPerdrp);
	}
	else
		printf(" |%32s %s %s  ", " | 1-Rosemary "," ","NA");
	if (nCm.nAmnt > 0)
	{
		printf("| %10s %5s %d | %21s  \n","5-Clear Minds"," ", nCm.nSellPrice,"|");
	}
	else
		printf("| %10s %5s %s | %21s  \n","5-Clear Minds"," ","NA","|");
	if (nLav.nDrops > 0)
	{
		printf(" |%32s %s %d  ", " | 2-Lavender "," ", nLav.nPriPerdrp);
	}
	else
		printf(" |%32s %s %s  ", " | 2-Lavender "," ","NA");
	
	if (nEb.nAmnt > 0)
	{
		printf("| %10s %2s %d | %21s  \n","6-Energy Booster"," ", nEb.nSellPrice,"|");
	}
	else
		printf("| %10s %2s %s | %21s  \n","6-Energy Booster"," ","NA","|");
	if (nLem.nDrops > 0)
	{
		printf(" |%29s %4s %d  ", "| 3-Lemon "," ", nLem.nPriPerdrp);
	}
	else
		printf(" |%29s %4s %s  ", "| 3-Lemon "," ","NA");
	if (nCal.nAmnt > 0)
	{
		printf(" | %5s %9s %d  | %21s\n","7-Calming"," ", nCal.nSellPrice,"|");
	}
	else
			printf("| %5s %9s %s | %21s\n","7-Calming"," ","NA","|");
	if (nMint.nDrops > 0)	
		printf(" |%28s %5s %d  | %25s %21s\n", " | 4-Mint "," ", nMint.nPriPerdrp,"|","|");
	else
		printf(" |%28s %5s %s  | %24s %21s\n", " | 4-Mint "," ","NA","|","|");
	printf(" |%87s\n", "|");
}

/*Description: Deducts the diffuser oil of the player and adds to the player's money
Parameter 1: pMoney is the money the player has on hand
Parameter 2: pDoils is the diffuser oil the player chose to sell
Return Value: the money of the player is added based on the selling price of the oil, and the drops of the oil is 
deducted*/

void sellDoil (int *pMoney, Doils *pDoil)
{
	char cHm[5];
	int bValid;
	do
	{
		printf(" | How many do you want to sell? %57s\n","| ");
		scanf("%s", &cHm);
		bValid = isValid(cHm);
	}
	while(atoi(cHm) > pDoil->nAmnt || bValid == 0);
	
	*pMoney += pDoil -> nSellPrice * atoi(cHm);
	pDoil->nAmnt -= atoi(cHm);
}
/*Description: Deducts the diffuser oil of the player and adds to the player's money
Parameter 1: pMoney is the money the player has on hand
Parameter 2: pEoils is the essential oil the player chose to sell
Return Value: the money of the player is added based on the selling price of the oil, and the drops of chose the oil is 
deducted*/
void sellEoil(int *pMoney, Eoils *pEoil)
{
	char cHm[5];
	int bValid;
	
	do
	{
		printf(" | How many do you want to sell? %57s\n","| ");
		scanf("%s", &cHm);
		bValid = isValid(cHm);
		
	}
	while(atoi(cHm) > pEoil->nDrops || bValid == 0);
	*pMoney += pEoil->nPriPerdrp * atoi(cHm);
	pEoil->nDrops -= atoi(cHm);
}

/*Description: Asks the user what they want to sell, and then directs them to either sellEoil or sellDoil function depending on user's chice
parameter 1: *pMoney is the money the player has at hand. It is here because it will be used when the player chooses an oil to sell 
and the money gets added
parameter 2: pLav holds the drops of lavender oils and the price per drop which is needed to sell it
parameter 3: pLem holds the drops of lemon oils and the price per drop which is needed to sell it
parameter 4: pRose holds the drops of Rosemary oils and the price per drop which is needed to sell it
parameter 5: pMint holds the drops of Mint oils and the price per drop which is needed to sell it
parameter 6: pCm holds the drops of clear minds oils and the selling prince which is needed to sell it
parameter 7: pEb holds the drops of energy booster oils and the selling price which is needed to sell it
parameter 8: pCal holds the drops of calming oils and the selling price which is needed to sell it*/
void doSell(int *pMoney, Eoils *pLav, Eoils *pLem, Eoils *pRose, Eoils *pMint, Doils *pCm, Doils *pEb, Doils *pCal)
{
	char cChoice;
	int bStock;
	do
	{
		printf(" | Enter number of your choice (1-7), press 8 to go back %32s\n","|");
		scanf(" %c",&cChoice);
		bStock = 1;
		if	(cChoice == '1')
		{
			if (pRose->nDrops <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
			{ 	
				sellEoil(pMoney, pRose);
			}
		}
		else if (cChoice == '2')
		{
			if (pLav->nDrops <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
			{
				sellEoil(pMoney,pLav);
			}
				
		}
		else if (cChoice == '3')
		{
			if (pLem->nDrops <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
			{
				sellEoil(pMoney,pLem);
			}
				
		}
		else if(cChoice == '4')
		{
			if (pMint->nDrops <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else	
			{
				sellEoil(pMoney, pMint);
			}
		}
		else if(cChoice == '5')
		{
			if (pCm->nAmnt <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
				sellDoil(pMoney,pCm);
		}		
		else if(cChoice == '6')
		{
			if (pEb->nAmnt <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
			 	sellDoil(pMoney,pEb);
		}	
		else if(cChoice == '7')
		{
			if (pCal->nAmnt <= 0)
			{
				printf(" | No Stock ! %75s\n","|");
				bStock = 0;
			}
			else
			 	sellDoil(pMoney,pCal);
		}			
		 
	}
	while(cChoice<'1'|| cChoice>'8'|| bStock == 0);	
	
}
/*Description: Displays the recipe to make the diffuser oils as well as an easy way for the player
to see if they have the oils they need
Parameter 1: nLav is the drops of lavender oils
Parameter 2: nLem is the drops of Lemon oils
Parameter 3: nLRose is the drops of Rosemary oils
Parameter 4: nMint is the drops of Mint oils*/
void displayRecipeDiff(int nLav,int nLem,int nRose, int nMint)
{

//	printf(" |======================================================================================|\n");
	printf(" |  | %42s %41s","RECIPES","|  |\n");
	printf(" |  |  (1) Clear Minds  %29s %19s %16s"," |   (2) Energy Booster ", " |   (3) Calming"," |  |\n" );
	printf(" |  |  %d/3 drops of Lemon %6s  %d%s %4s  %d%s",nLem,"| ",nRose,"/1 drops of Rosemary", "| ",nLav,"/3 drops of Lavender  |  |\n" );
	printf(" |  |  %d/2 drops of Rosemary %3s  %d%s %8s  %d%s",nRose,"| ",nMint,"/1 drops of Mint", "| ",nRose,"/2 drops of Rosemary  |  |\n" );
	printf(" |  |  %d/2 drops of Mint %7s  %d%s %7s  %d%s %9s",nMint,"| ",nLem,"/1 drops of Lemon", "| ",nLem,"/1 drops of Lemon"," |  |\n" );
	printf(" | %87s", "|\n");
	
}

/*Description: Displays the Gameover and the final money of the player with the debt deducted
Parameter 1: pDay is th current numbers of day
Parameter 2: pMOney is the money at hand of the player that gets displayed after debt had been deducted
Parameter 3: pDebt is the current debt of the player, it is deducted from the final players money
parameter 4: pCity current city of the player
parameter 5: pMprice current make charge of the day
parameter 6: pLav is the struct that holds all values of lavender oils
parameter 7: pLem is the struct that holds all values of Lemon oils
parameter 8: pRose is the struct holding all values if rosemary oils
parameter 9: pMint is the struct holding all values of mint oils
parameter 10: pCm is the struct holding all values of the clean minds oil
parameter 11: pEb is the struct holding all values of the energy booster oils
parameter 12: pCal is the struct holdig all values of the calming oils
Return Value: Exits the program if player chooses to do so, other wise it will restart the entire game, and reset
all values to their defaults*/
void GameOver(int *pDay, int *pMoney, int *pDebt, char *pCity[8], int * pMprice, Eoils *pLav,Eoils *pLem,Eoils *pRose,Eoils *pMint,Doils *pCm,Doils *pEb, Doils *pCal)
{
	char cRstrt;
	int nEnd;
	int nScore =*pMoney -*pDebt;
	system("cls");

	printf("\n %10s GAMEE OVERR!\n"," ");
	printf("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n");
	printf(" | Lavender Oils left: %d %13s \n", pLav->nDrops,"|");
	printf(" | Rosemary Oils left: %d %13s \n", pRose->nDrops,"|");
	printf(" | Lemon Oils left: %d %16s \n", pLem->nDrops,"|");
	printf(" | Mint Oils left: %d %17s \n", pMint->nDrops, "|");
	printf(" | Clear Minds Oils left: %d %10s \n",pCm->nAmnt,"|");
	printf(" | Energy Booster Oils left: %d %7s \n",pEb->nAmnt,"|");
	printf(" | Calming Oils left: %d %14s\n",pCal->nAmnt,"|");
	printf(" | %35s\n","|");
	printf(" | FINAL MONEY: %d %17s\n", *pMoney,"|");
	printf(" | FINAL DEBT: %d %18s\n", *pDebt,"|");
	printf(" | %35s\n","|");
	printf(" |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n");
	printf(" | 1-Restart Game %20s \n","|");
	printf(" | 2-End Game %24s\n","|");
	printf(" | %35s\n","|");
	do
	{
		printf(" | (Press number of your choice) %5s\n","|");
		scanf(" %c", &cRstrt);
	}
	while(cRstrt<'1' || cRstrt>'2');
	
	if (cRstrt == '1')
	{
		*pMoney = 1500;
		*pDebt = 4000;
		
		*pDay = 15; 
		strcpy(*pCity,"MANILA");
	
		pLav->nDrops = 0;
		pLem->nDrops = 0;
		pRose->nDrops = 0;
		pMint->nDrops = 0;
				
		pLav->nPriPerdrp = 0;
		pLem->nPriPerdrp = 0;
		pRose->nPriPerdrp = 0;
		pMint->nPriPerdrp = 0;
	
		pCm->nAmnt = 0;
		pEb->nAmnt = 0;
		pCal->nAmnt = 0;
		*pMprice = GetMakeCharge(*pCity);
	
		pRose -> nBuyPrice = GetRoseBuyPrice();
		pLav -> nBuyPrice = GetLavBuyPrice();
		pLem -> nBuyPrice = GetLemBuyPrice();
		pMint -> nBuyPrice = GetMintBuyPrice(); 
			
		pCm -> nSellPrice = 1.15 * (3 * (pLem -> nBuyPrice / 10) + 2 * (pRose -> nBuyPrice/10) + 2 * (pMint -> nBuyPrice / 10));
		pEb -> nSellPrice = 1.15 * (pLem -> nBuyPrice / 10 +  pRose -> nBuyPrice / 10 + pMint -> nBuyPrice / 10);
		pCal -> nSellPrice = 1.15 * (pLem -> nBuyPrice / 10 + 2 * (pRose -> nBuyPrice / 10) + 3 * (pLav -> nBuyPrice / 10));
		
		system("cls");
		displayMenu();
		menu();
		GamePlay(*pDay, *pMoney, *pDebt, *pCity, *pMprice, *pLav, *pLem, *pRose, *pMint, *pCm, *pEb, *pCal);
	}
}

/*Description: Displays the player's money, debt, number of days left, current city,
 and the amount of diffuser oils and essential oils at hand
Parameter 1: nDay is the amount of days the player has left
Parameter 2: nMoney is the money the player has at hand
Parameter 3: nDebt is the debt the player currently has
Parameter 4: cCity is the city the player is currently in
Parameter 5: nLav is the number of lavender drops the player currently has
parameter 6: nLem is the number of lemon drops the player currently has
parameter 7: nRose is the amount of rosemary drops the player currently has
parameter 8: nMint is the amount of mint drops the player has
parameter 9: nCm is the amount of clear minds the player has
parameter 10: nEb is the amount of energy booster the player has
parameter 11: nCal is the amount of calming the player has */
void DisplayInventory(int nDay, int nMoney, int nDebt, char cCity[], int nLav,int nLem,int nRose,int nMint,int nCm,int nEb, int nCal)
{
	printf("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	printf(" | ESSENTIAL OILS: %25s%45s\n","DIFFUSER OILS","|");
	printf(" | Rosemary: %d drops %10s",nRose," ");
	printf("Clear Minds: %d%45s",nCm, "|\n");
	printf(" | Lavender: %d drops %10s",nLav, " ");
	printf("Energy Booster: %d%42s",nEb, "|\n");
	printf(" | Lemon: %d drops %13s",nLem," ");
	printf("Calming: %d%49s",nCal, "|\n");
	printf(" | Mint: %d drops %72s\n", nMint,"|");
	printf(" |%87s\n", "|");
	printf(" | Money on hand: %d %66s \n",nMoney, "|");
	printf(" | Debt: %d %75s\n", nDebt, "|");
	printf(" | Days Left: %d %72s\n", nDay, "|");
	printf(" | Current City: %s %65s\n", cCity, "|");
	printf(" |%87s\n", "|");
    printf(" |======================================================================================|\n"); 
}

/*Description: asks the player what they want to do and calls the function corresponding to what the
player wants. Also stores all values of the game
Parameter 1: nDay is the number of days left
Parameter 2: nMoney is the current number of days left in the game
Parameter 3: nDebt is the current debt the player has
Parameter 4: cCity is the current city the player is at
Parameter 5: nMprice is the current make charge for the day
parameter 6: Lav holds the drops,price per drop, and buy price of lavender oils
parameter 7: Lem holds the drops,price per drop, and buy price of lemon oils
parameter 8: Rose holds the drops,price per drop, and buy price of Rose oils
parameter 9: Mint holds the drops,price per drop, and buy price of Mint oils
parameter 10: Cm holds the amount, and sell price of clear minds oils
parameter 11: Eb holds the amount, and sell price of energy booster oils
parameter 12: Cal holds the amount, and sell price of calming oils
*/
int GamePlay(int nDay, int nMoney, int nDebt, char cCity[8], int nMprice, Eoils Lav, Eoils Lem, Eoils Rose, Eoils Mint, Doils Cm, Doils Eb, Doils Cal)
{
	char cChoice;
	
	DisplayInventory(nDay, nMoney, nDebt, cCity, Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops,Cm.nAmnt, Eb.nAmnt, Cal.nAmnt);
	printf(" |%87s\n", "|");
	printf(" | %63s %22s\n"," |          What to you want to do?        |","|");
	printf(" |  %63s %22s", " |       1-Buy |   2-Sell    |  3-Make     | ","|\n");
	printf(" |  %62s %23s","  |  4-Pay Debt |   5-Loan    |  6-Travel   |", "|\n" );
	printf(" |%87s\n", "|");
	
	do
	{
		printf(" |  Enter number of your choice (1-6) %52s", "|\n");
		scanf(" %c", &cChoice);
	}	
	while (cChoice <'1' || cChoice > '6');
	
	if (cChoice == '6')
	{
		if (nDay != 1)
		{
			
			system("cls");
			DisplayInventory(nDay, nMoney, nDebt, cCity, Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops,Cm.nAmnt, Eb.nAmnt, Cal.nAmnt);
			doTravel(&cCity, &nDay, &nDebt, &nMprice, &Rose, &Lav, &Lem, &Mint, &Cm, &Eb, &Cal);
			GamePlay(nDay, nMoney, nDebt, cCity, nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);
		}
		else 
		{
			GameOver(&nDay, &nMoney, &nDebt, &cCity, &nMprice, &Lav, &Lem, &Rose, &Mint, &Cm, &Eb, &Cal);
		}
			
	}
	if (cChoice == '5')
	{		
		doLoan(&nMoney, &nDebt);
		system("cls");
		GamePlay(nDay, nMoney, nDebt, cCity, nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);
	}
	else if (cChoice == '4')
	{
		payDebt(&nMoney, &nDebt);	
		system("cls");
		GamePlay(nDay, nMoney, nDebt, cCity, nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);
	}
	else if (cChoice == '3')
	{
		system("cls");
		DisplayInventory(nDay, nMoney, nDebt, cCity, Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops,Cm.nAmnt, Eb.nAmnt, Cal.nAmnt);
		displayRecipeDiff(Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops);
		MakeDiff(&nMoney, cCity, nMprice, &Lav, &Lem,&Rose, &Mint, &Cm.nAmnt, &Eb.nAmnt, &Cal.nAmnt);
		system("cls");
		GamePlay(nDay,nMoney,nDebt,cCity,nMprice,Lav,Lem,Rose,Mint,Cm,Eb,Cal);
	}
	else if (cChoice == '2')
	{
		system("cls");
		DisplayInventory(nDay, nMoney, nDebt, cCity, Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops, Cm.nAmnt, Eb.nAmnt, Cal.nAmnt);
		displaySellPrice(Lav, Lem, Rose, Mint, Cm, Eb, Cal);
		doSell(&nMoney, &Lav, &Lem, &Rose, &Mint, &Cm, &Eb, &Cal);
		system("cls");
		GamePlay(nDay, nMoney, nDebt, cCity,nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);		
	}
	else
	{
		system("cls");
		DisplayInventory(nDay, nMoney, nDebt, cCity, Lav.nDrops, Lem.nDrops, Rose.nDrops, Mint.nDrops,Cm.nAmnt, Eb.nAmnt, Cal.nAmnt);
		displayBuyPrice(Lav.nBuyPrice, Lem.nBuyPrice, Rose.nBuyPrice, Mint.nBuyPrice);
		doBuy(&Lav, &Lem, &Rose, &Mint, &nMoney);
		system("cls");
		GamePlay(nDay, nMoney, nDebt, cCity, nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);
			
	}
}
/*Description: Default values are declared here
Return Value: will call Gameplay if menu() returned 1. Otherwise the game will end*/ 
int main()
{

	displayMenu();
	
	//Inventory and other defaults
	int nMoney = 1500;
	int nDebt = 4000;
	
	int nDay = 5; 
	char cCity[8] = "MANILA";
	
	int nMprice;
	
	Eoils Lav;
	Eoils Lem;
	Eoils Rose;
	Eoils Mint;
	
	Doils Cm;
	Doils Eb;
	Doils Cal;
	
	if (menu() == 1)
	{
		Lav.nDrops = 0;
		Lem.nDrops = 0;
		Rose.nDrops = 0;
		Mint.nDrops = 0;
		
		Lav.nPriPerdrp = 0;
		Lem.nPriPerdrp = 0;
		Rose.nPriPerdrp = 0;
		Mint.nPriPerdrp = 0;
	
		Cm.nAmnt = 0;
		Eb.nAmnt = 0;
		Cal.nAmnt = 0;
		// prices at the start of the game;
		Lav.nBuyPrice = GetLavBuyPrice();
		Lem.nBuyPrice = GetLemBuyPrice();
		Rose.nBuyPrice = GetRoseBuyPrice();
		Mint.nBuyPrice = GetMintBuyPrice();
		
		Cm.nSellPrice = 1.15 * (3 * (Lem.nBuyPrice / 10) + 2 * (Rose.nBuyPrice / 10) + 2 * (Mint.nBuyPrice / 10));
		Eb.nSellPrice = 1.15 * (Lem.nBuyPrice / 10 + Rose.nBuyPrice / 10 + Mint.nBuyPrice / 10);
		Cal.nSellPrice = 1.15 * (Lem.nBuyPrice / 10 + 2 * (Rose.nBuyPrice / 10) + 3 * (Lav.nBuyPrice / 10));
		
		nMprice = GetMakeCharge(cCity);
		
		GamePlay(nDay, nMoney, nDebt, cCity,nMprice, Lav, Lem, Rose, Mint, Cm, Eb, Cal);		
	}
		return 0;
}


